// 0/1 knapsack problem using DP


#include<bits/stdc++.h>
using namespace std;

int kanpsack(int p[],int wt[],int w,int n){
    int arr[n+1][w+1];
    
    //p is array of profit 
    //wt is array of weight
    //w is total knapsack capacity
    
    for(int i=0;i<=n;i++){
        for(int j=0;j<=w;j++){
            
            if(i==0 || j==0)arr[i][j]=0;
            
            else if(j>=wt[i-1])
            //incude or not include object in knapsack
                arr[i][j]=max( /*not include*/ arr[i-1][j]  , arr[i-1][j-wt[i-1]]+p[i-1] /*include*/ );
            
            else 
                arr[i][j]=arr[i-1][j];
            
        }
    }
    return arr[n][w];
    
    
}

int main(){
    int p[]={ 1,2,5,6 };
    int wt[]={ 2,3,4,5 };
    int n=sizeof(p)/sizeof(p[0]);
    int w=8;
    cout<<"max profit using 0/1 knapsack problem = "<<kanpsack(p,wt,w,n)<<endl;
    
   
    return 0;
}
